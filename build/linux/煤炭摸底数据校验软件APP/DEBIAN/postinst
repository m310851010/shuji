#!/bin/bash

set +e

case "$1" in
    configure)
        # 更新桌面数据库
        update-desktop-database /usr/share/applications >/dev/null 2>&1 || true
        
        # 更新图标缓存
        gtk-update-icon-cache -f /usr/share/icons/hicolor >/dev/null 2>&1 || true
        
        # 为所有用户创建桌面快捷方式（兼容中英文环境）
        for home_dir in /home/*; do
            if [ -d "$home_dir" ] && [ "$(basename "$home_dir")" != "lost+found" ]; then
                username=$(basename "$home_dir")
                
                # 确定桌面路径（兼容中英文）
                desktop_dir=""
                if [ -d "$home_dir/Desktop" ]; then
                    desktop_dir="$home_dir/Desktop"
                elif [ -d "$home_dir/桌面" ]; then
                    desktop_dir="$home_dir/桌面"
                else
                    # 如果桌面目录不存在，创建它
                    desktop_dir="$home_dir/Desktop"
                    mkdir -p "$desktop_dir"
                    chown "$username:$username" "$desktop_dir"
                fi
                
                # 创建桌面快捷方式
                desktop_file="$desktop_dir/煤炭摸底数据校验软件.desktop"
                
                cat > "$desktop_file" << EOF
[Desktop Entry]
Comment=数据处理软件
Comment[zh_CN]=数据处理软件
Exec=/usr/local/bin/shuji
GenericName=煤炭摸底数据校验软件
GenericName[zh_CN]=煤炭摸底数据校验软件
Name=煤炭摸底数据校验软件
Name[zh_CN]=煤炭摸底数据校验软件
StartupNotify=false
Terminal=false
Type=Application
Categories=Tools;
Keywords=国产系统;校验软件;煤炭摸底;
X-DBUS-ServiceName=
X-DBUS-StartupType=
X-KDE-SubstituteUID=false
X-KDE-Username=
Icon=/usr/share/icons/shuji/appicon.png
Description=煤炭摸底数据校验软件
StartupWMClass=shuji
EOF
                
                # 设置正确的权限
                chown "$username:$username" "$desktop_file"
                chmod 755 "$desktop_file"
            fi
        done
        ;;
esac


# 检查并更新 WebKitGTK
PACKAGE="libwebkit2gtk-4.0-37:amd64"
LOG_FILE="/var/log/${PACKAGE%-*}-upgrade.log"

log() {
    logger -t "shuji-postinst" "$*" >> "$LOG_FILE" 2>&1 || true
}

log "开始检查 WebKitGTK 依赖..."

# 获取已安装版本
INSTALLED_VERSION=$(dpkg -l | grep "^ii" | grep -w "$PACKAGE" | awk '{print $3}' | head -n1)

if [ -z "$INSTALLED_VERSION" ]; then
    log "$PACKAGE 未安装，跳过升级。"
    exit 0
fi

log "当前版本: $INSTALLED_VERSION"

log "尝试从本地缓存获取最新版本..."
CANDIDATE_VERSION=$(apt-cache policy "$PACKAGE" | grep "Candidate" | awk '{print $2}' | head -n1)

if [ -z "$CANDIDATE_VERSION" ] || [ "$CANDIDATE_VERSION" = "(none)" ]; then
    log "本地缓存无可用版本，尝试更新 APT 索引..."

    # 静默更新 APT 缓存（可能因网络或权限失败，但不影响）
    apt-get update -qq >/dev/null 2>&1 || log "APT 更新失败，跳过升级。"

    # 再次尝试获取最新版本
    CANDIDATE_VERSION=$(apt-cache policy "$PACKAGE" | grep "Candidate" | awk '{print $2}' | head -n1)
fi

if [ -z "$CANDIDATE_VERSION" ] || [ "$CANDIDATE_VERSION" = "(none)" ]; then
    log "无法获取最新版本信息，跳过升级。"
    exit 0
fi

log "最新版本: $CANDIDATE_VERSION"

# 比较版本
if dpkg --compare-versions "$CANDIDATE_VERSION" gt "$INSTALLED_VERSION"; then
    log "正在静默升级 $PACKAGE 到 $CANDIDATE_VERSION..."

    # 静默安装最新版本
    apt-get install -y --no-install-recommends "$PACKAGE=$CANDIDATE_VERSION" > /dev/null 2>&1

    if [ $? -eq 0 ]; then
        log "升级成功"
    else
        log "升级失败（可能网络或权限问题），继续安装主程序。"
    fi
else
    log "已是最新版本，无需升级。"
fi

exit 0